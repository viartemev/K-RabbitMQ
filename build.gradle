buildscript {
    ext {
        kotlin_version = '1.3.50'
        rabbitMqJavaClientVersion = '5.7.3'
        junit_jupiter_version = '5.5.1'
        junit_plugin_version = '1.2.0'
        kluent_version = '1.48'
        ktor_version = '1.2.4'
        vertx_version = '3.8.1'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        jcenter()
    }

    dependencies {
        classpath "com.novoda:bintray-release:0.9.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.8"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.0.BUILD-SNAPSHOT"
        classpath "org.jetbrains.kotlin:kotlin-allopen:1.3.50"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath 'com.adarshr:gradle-test-logger-plugin:1.7.0'
    }
}

plugins {
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

configure(allprojects) { project ->
    group = 'com.viartemev'

    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "idea"

    repositories {
        mavenCentral()
        jcenter()
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    sourceCompatibility = 1.8

    dependencies {
        compile 'io.github.microutils:kotlin-logging:1.7.6'

        compile "com.rabbitmq:amqp-client:$rabbitMqJavaClientVersion"
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.3.0"
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'
        testCompile 'org.slf4j:slf4j-api:2.0.0-alpha0'
        testRuntime 'ch.qos.logback:logback-classic:1.3.0-alpha4'
        testRuntime 'ch.qos.logback:logback-core:1.3.0-alpha4'
    }
}

configure(rootProject) {
    version = '0.0.6'

    apply plugin: "com.novoda.bintray-release"
    apply plugin: 'com.adarshr.test-logger'

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    dependencies {
        testImplementation "com.rabbitmq:http-client:3.3.0.RELEASE"
        testImplementation "org.springframework:spring-web:5.1.9.RELEASE"
        testImplementation "org.apache.httpcomponents:httpclient:4.5.9"
        testCompile "org.testcontainers:testcontainers:1.12.1"
        testCompile "org.testcontainers:junit-jupiter:1.11.4"
        testCompile "com.nhaarman:mockito-kotlin:1.6.0"
        testCompile "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    }

    publish {
        userOrg = 'viartemev'
        repoName = 'Maven'
        groupId = 'com.viartemev'
        artifactId = 'the-white-rabbit'
        publishVersion = '0.0.6'
        desc = 'The White Rabbit is an asynchronous RabbitMQ library based on Kotlin coroutines'
        website = 'https://github.com/viartemev/the-white-rabbit'
        licences = ['MIT']
    }
}

project('the-white-rabbit-ktor-example') {
    apply plugin: 'application'
    mainClassName = "io.ktor.server.netty.EngineMain"

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://kotlin.bintray.com/ktor' }
    }

    sourceSets {
        main.kotlin.srcDirs = main.java.srcDirs = ['src']
        test.kotlin.srcDirs = test.java.srcDirs = ['test']
        main.resources.srcDirs = ['resources']
        test.resources.srcDirs = ['testresources']
    }

    dependencies {
        compile rootProject
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "io.ktor:ktor-server-netty:$ktor_version"
        compile "ch.qos.logback:logback-classic:1.2.3"
        compile "io.ktor:ktor-server-core:$ktor_version"
        compile "io.ktor:ktor-jackson:$ktor_version"
        testCompile "io.ktor:ktor-server-tests:$ktor_version"
    }

}

project('the-white-rabbit-spring-boot-example') {
    repositories {
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    apply plugin: "org.jetbrains.kotlin.plugin.spring"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    test {
        useJUnitPlatform()
    }

    dependencies {
        compile rootProject
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.3.0'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude module: 'junit'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'io.projectreactor:reactor-test'
    }
}

project('the-white-rabbit-vertx-example') {
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "application"

    mainClassName = 'io.vertx.core.Launcher'
    def mainVerticleName = 'com.viartemev.the_white_rabbit_vertx_example.App'

    shadowJar {
        classifier = 'fat'
        mergeServiceFiles {
            include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
        }
    }

    dependencies {
        compile rootProject
        compile "io.vertx:vertx-lang-kotlin:$vertx_version"
        compile "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version"
        compile "io.vertx:vertx-web:$vertx_version"
    }
}

project('the-white-rabbit-example') {
    dependencies {
        compile rootProject
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4'
        runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
        runtime group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha4'
    }
}

project('benchmarks') {
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "me.champeau.gradle.jmh"

    jmh.jmhVersion = '1.21'

    jmhJar {
        baseName 'benchmarks'
        classifier = null
        version = null
        destinationDir = file("$rootDir")
    }

    dependencies {
        compile rootProject
        compile "org.openjdk.jmh:jmh-core:1.21"
        jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    }

    task deleteEmptyBmList(type: Delete) {
        delete "$buildDir/jmh-generated-classes/META-INF/BenchmarkList"
    }
    jmhCompileGeneratedClasses.finalizedBy deleteEmptyBmList
}

